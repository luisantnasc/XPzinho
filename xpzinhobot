
import os
import logging
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

from storage import (
    carregar_usuarios,
    salvar_usuario,
    carregar_livro,
    salvar_livro,
    carregar_reuniao,
    salvar_reuniao,
)
from utils import is_admin, chunk_list

# Configura√ß√£o de logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def xp(update: Update, context: CallbackContext) -> None:
    mensagem = (
        "üìö *Bem-vindo ao XP da Leitura!* üìö\n\n"
        "Use o comando /livroatual para ver o que estamos lendo e "
        "o comando /reuniao para ter acesso a data da nossa discuss√£o."
    )
    update.message.reply_text(mensagem, parse_mode=ParseMode.MARKDOWN)

def livro_atual(update: Update, context: CallbackContext) -> None:
    username = update.effective_user.username
    if username:
        salvar_usuario("@" + username)
    
    livro = carregar_livro()
    update.message.reply_text(f"üìñ *Estamos lendo:*\n{livro}", parse_mode=ParseMode.MARKDOWN)

def set_livro(update: Update, context: CallbackContext) -> None:
    if not is_admin(update, context):
        update.message.reply_text("‚ö†Ô∏è Apenas administradores podem usar esse comando.")
        return

    novo_livro = " ".join(context.args)
    if not novo_livro:
        update.message.reply_text("‚ÑπÔ∏è Uso: /setlivro Nome do livro e autor")
        return

    salvar_livro(novo_livro)
    update.message.reply_text(f"‚úÖ Livro atualizado para:\n*{novo_livro}*", parse_mode=ParseMode.MARKDOWN)

def reuniao(update: Update, context: CallbackContext) -> None:
    texto = carregar_reuniao()
    update.message.reply_text(f"üóìÔ∏è *Pr√≥xima discuss√£o:*\n{texto}", parse_mode=ParseMode.MARKDOWN)

def set_reuniao(update: Update, context: CallbackContext) -> None:
    if not is_admin(update, context):
        update.message.reply_text("‚ö†Ô∏è Apenas administradores podem usar esse comando.")
        return

    nova_info = " ".join(context.args)
    if not nova_info:
        update.message.reply_text("‚ÑπÔ∏è Uso: /setreuniao Dia, hora, link ou local")
        return

    salvar_reuniao(nova_info)
    update.message.reply_text(f"‚úÖ Informa√ß√µes da reuni√£o atualizadas:\n*{nova_info}*", parse_mode=ParseMode.MARKDOWN)

def convocar(update: Update, context: CallbackContext) -> None:
    if not is_admin(update, context):
        update.message.reply_text("‚ö†Ô∏è Apenas administradores podem usar este comando.")
        return

    usuarios = carregar_usuarios()
    if not usuarios:
        update.message.reply_text("‚ÑπÔ∏è Nenhum usu√°rio registrado.")
        return

    update.message.reply_text("üîî *Convocando todos os membros do clube:*", parse_mode=ParseMode.MARKDOWN)
    
    # Dividir em 5 grupos de at√© 4 usu√°rios
    for i in range(5):
        start_idx = i * 4
        end_idx = start_idx + 4
        grupo = usuarios[start_idx:end_idx]
        
        if grupo:
            texto = " ".join(grupo)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=texto
            )

def main() -> None:
    TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # Registrando os comandos
    dispatcher.add_handler(CommandHandler("start", xp))
    dispatcher.add_handler(CommandHandler("xp", xp))
    dispatcher.add_handler(CommandHandler("livroatual", livro_atual))
    dispatcher.add_handler(CommandHandler("setlivro", set_livro))
    dispatcher.add_handler(CommandHandler("reuniao", reuniao))
    dispatcher.add_handler(CommandHandler("setreuniao", set_reuniao))
    dispatcher.add_handler(CommandHandler("convocar", convocar))

    # Iniciando o bot
    updater.start_polling()
    print("Bot iniciado com sucesso! Agora responder√° aos comandos.")
    updater.idle()

if __name__ == '__main__':
    main()
